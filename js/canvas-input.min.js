class CanvasInput { constructor(t, s) { this.canvas = t, this.assignDefaultParameters(s), this.ctx = t.getContext("2d"), this.input_text = "", this.input_selected = !1, this.text_overflow_offset = 0, this.addEventListeners(), this.special_keys_callbacks = [{ key: "Backspace", callback: this.onBackspacePress.bind(this) }, { key: "Enter", callback: this.onEnterPress.bind(this) }, { key: "ArrowLeft", callback: this.onArrowPress.bind(this) }, { key: "ArrowRight", callback: this.onArrowPress.bind(this) }, { key: "ArrowUp", callback: this.onArrowPress.bind(this) }, { key: "ArrowDown", callback: this.onArrowPress.bind(this) }], this.calculateTextPosition(), this.input_selector_pos = this.calculateSelectorPosition() } assignDefaultParameters(t) { const s = { pos_x: 0, pos_y: 0, width: 150, height: 30, contour_width: 1, contour_color: "black", text_size: 15, text_font: "Arial", text_color: "Black", submit_callback: null, placeholder: "Enter text here ...", allow_overflow: !0, change_cursor_on_hover: !0, background_color: "#FFFFFF" }; for (var e in s) t && t.hasOwnProperty(e) ? this[e] = t[e] : this[e] = s[e] } addEventListeners() { this.canvas.addEventListener("click", t => this.eventOnClick(t)), this.canvas.addEventListener("mousemove", t => this.eventOnMouseHover(t)), window.addEventListener("keydown", t => this.eventOnKeydown(t)) } eventOnMouseHover(t) { if (!this.change_cursor_on_hover) return; const s = { x: t.clientX, y: t.clientY }; this.isPositionInElement(s) ? this.canvas.style.cursor = "text" : "text" === this.canvas.style.cursor && (this.canvas.style.cursor = "auto") } eventOnClick(t) { const s = { x: t.clientX, y: t.clientY }; this.isPositionInElement(s) ? this.input_selected = !0 : this.input_selected = !1 } eventOnKeydown(t) { if (this.input_selected) if (t.key.length > 1) { const s = this.special_keys_callbacks.find(s => s.key === t.key); s && s.callback(t) } else { if (this.ctx.font = this.text_size + "px " + this.text_font, this.ctx.measureText(this.input_text.substr(this.text_overflow_offset) + t.key).width > this.width) { if (!this.allow_overflow) return; for (; this.ctx.measureText(this.input_text.substr(this.text_overflow_offset) + t.key).width > this.width;)this.text_overflow_offset++ } this.input_text += t.key, this.input_selector_pos = this.input_text.length } } onBackspacePress() { if (this.input_text.length > 0 && (this.input_text = this.input_text.substr(0, this.input_selector_pos - 1) + this.input_text.substr(this.input_selector_pos, this.input_text.length), this.input_selector_pos > 0 && this.input_selector_pos-- , this.text_overflow_offset > 0)) for (this.ctx.font = this.text_size + "px " + this.text_font; this.ctx.measureText(this.input_text.substr(this.text_overflow_offset - 1)).width < this.width && this.text_overflow_offset > 0;)this.text_overflow_offset-- } onEnterPress() { this.submit_callback && 0 !== this.input_text.length && (this.submit_callback(this.input_text), this.input_text = "", this.text_overflow_offset = 0) } onArrowPress(t) { switch (t.key) { case "ArrowLeft": this.input_selector_pos > 0 && this.input_selector_pos--; break; case "ArrowRight": this.input_selector_pos + 1 <= this.input_text.length && this.input_selector_pos++ } } moveTo(t, s) { this.pos_x = t, this.pos_y = s, this.calculateTextPosition() } calculateTextPosition() { this.input_text_pos = { x: this.pos_x, y: this.pos_y + this.height / 2 + this.text_size / 3 } } calculateSelectorPosition() { var t = this.input_text.substr(this.text_overflow_offset, this.input_selector_pos); return this.input_text_pos.x + this.ctx.measureText(t).width } isPositionInElement(t) { return t.x >= this.pos_x && t.x <= this.pos_x + this.width && t.y >= this.pos_y && t.y <= this.pos_y + this.height } drawInputText() { this.ctx.font = this.text_size + "px " + this.text_font, this.ctx.fillStyle = this.text_color; var t = this.input_text.substr(this.text_overflow_offset); this.ctx.fillText(t, this.input_text_pos.x, this.input_text_pos.y), this.ctx.stroke() } drawInputContour() { this.contour_width <= 0 || (this.ctx.lineWidth = this.contour_width, this.ctx.strokeStyle = this.contour_color, this.ctx.rect(this.pos_x, this.pos_y, this.width, this.height), this.ctx.fillStyle = this.background_color, this.ctx.fillRect(this.pos_x, this.pos_y, this.width, this.height), this.ctx.stroke()) } drawInputSelector() { this.input_selected && (this.ctx.font = this.text_size + "px " + this.text_font, this.ctx.fillStyle = this.text_color, this.ctx.fillText("|", this.calculateSelectorPosition(), this.input_text_pos.y), this.ctx.stroke()) } drawPlaceholder() { this.input_text.length > 0 || !this.placeholder || (this.ctx.font = this.text_size + "px " + this.text_font, this.ctx.fillStyle = "#808080", this.ctx.fillText(this.placeholder, this.input_text_pos.x, this.input_text_pos.y), this.ctx.stroke()) } render() { this.drawInputContour(), this.drawPlaceholder(), this.drawInputText(), this.drawInputSelector() } }